// 최소직사각형

// 명함 지갑을 만드는 회사에서 지갑의 크기를 정하려고 합니다.
// 다양한 모양과 크기의 명함들을 모두 수납할 수 있으면서, 작아서 들고 다니기 편한 지갑을 만들어야 합니다.
// 이러한 요건을 만족하는 지갑을 만들기 위해 디자인팀은 모든 명함의 가로 길이와 세로 길이를 조사했습니다.
// 아래 표는 4가지 명함의 가로 길이와 세로 길이를 나타냅니다.

// 가장 긴 가로 길이와 세로 길이가 각각 80, 70이기 때문에 80(가로) x 70(세로) 크기의 지갑을 만들면 모든 명함들을 수납할 수 있습니다.
// 하지만 2번 명함을 가로로 눕혀 수납한다면 80(가로) x 50(세로) 크기의 지갑으로 모든 명함들을 수납할 수 있습니다.
// 이때의 지갑 크기는 4000(=80 x 50)입니다.
// 모든 명함의 가로 길이와 세로 길이를 나타내는 2차원 배열 sizes가 매개변수로 주어집니다.
// 모든 명함을 수납할 수 있는 가장 작은 지갑을 만들 때, 지갑의 크기를 return 하도록 solution 함수를 완성해주세요.

function solution(sizes) {
  var answer = 0;
  
  let arr1 = []; // 가로로 사용할 값
  let arr2 = []; // 새로로 사용할 값
  
  for (let i = 0; i < sizes.length; i++) {
      sizes[i].sort((a, b) => b - a); // 각 명함의 가로와 세로 값을 내림차순으로 정렬하여 큰 값을 앞에 배치
      
      // 정렬된 값에서 큰 값은 arr1, 작은 값은 arr2에 저장
      arr1.push(sizes[i][0]);
      arr2.push(sizes[i][1]);
  }
  
  answer = Math.max(...arr1) * Math.max(...arr2); // arr1에서 가장 큰 값과 arr2에서 가장 큰 값을 곱하기
  
  return answer;
}

console.log(solution([[60, 50], [30, 70], [60, 30], [80, 40]])); // 4000
console.log(solution([[10, 7], [12, 3], [8, 15], [14, 7], [5, 15]])); // 120
console.log(solution([[14, 4], [19, 6], [6, 16], [18, 7], [7, 11]])); // 133